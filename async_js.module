<?php 

/**
 * Keep track of scripts to be loaded asynchronously and provide a slimmer 
 * alternative to drupal_add_js() for cases where it isn't necessary.
 * 
 * @param string $src
 *   The path to the file relative to base_path().
 * @param string $callback
 *   The name of a javascript function in the global scope which will be 
 *   run once this particular script is finished loading.
 * @param array $fade
 *   An array of jQuery selectors which correspond to elements on the page
 *   to fadeIn after a specified timeout and in unison. The fadeIn effect
 *   will be applied universally to all elements defined in this way on a
 *   single page.
<<<<<<< Updated upstream
 *   
 * @see async_js_js_alter()
 */
function add_async_js($src = NULL, $callback = NULL, $fade = array()) {
=======
 * @param string $parent
 *   An id string which corresponds to the id="" attribute of an element on the
 *   page in which the script should be inserted. If left blank the script will
 *   be inserted before the first script element.
 * @param string $type
 *   The type of JavaScript that is to be added to the page. Allowed values are
 *   'file' or 'external'. Defaults to 'external'.
 *
 * @see async_js_js_alter()
 */
function async_js_add_js($src = NULL, $callback = NULL, $fade = array(), $parent = NULL, $type = 'external') {
>>>>>>> Stashed changes
  $javascript = &drupal_static(__FUNCTION__, array());
  
  if (!empty($src)) {
      $javascript[$src] = array('data' => $src);
      $javascript[$src]['callback'] = $callback;
      $javascript[$src]['fade'] = $fade;
      $javascript[$src]['parent'] = $parent;
      $javascript[$src]['type'] = $type;
  }
  
  return $javascript;
}

/**
 * Implements hook_js_alter().
 * 
 * @param array $javascript
 *   An array of all JavaScript being presented on the page.
 *   
 * @see async_js_js_alter()
 */
function async_js_js_alter(&$javascript) {
  
  // Add any scripts to be loaded asynchronously.
  foreach ($javascript as $key => $script) {
    if (!empty($script['async_js']) && $script['async_js']) {
      $callback = $script['async_callback'] ? $script['async_callback'] : NULL;
      $fade = $script['async_fade'] ? $script['async_fade'] : array();
<<<<<<< Updated upstream
      add_async_js($script['data'], $callback, $fade);
=======
      $parent = $script['async_parent'] ? $script['async_parent'] : NULL;
      async_js_add_js($script['data'], $callback, $fade, $parent, $script['type']);
>>>>>>> Stashed changes
      unset($javascript[$key]);
    }
  }
  
  // Retrieve all scripts to be loaded asynchronously.
  $async_js = add_async_js();
  
  if (!empty($async_js)) {
    
    // Get variables necessary for building the file url.
    $default_query_string = variable_get('css_js_query_string', '0');
    $js_version_string = variable_get('drupal_js_version_query_string', 'v=');
<<<<<<< Updated upstream
    
    // Build settings object.
=======

    // Initialize settings object.
>>>>>>> Stashed changes
    $settings = array();
    $javascript['settings']['data'][]['async_js'] = &$settings;

    // Add settings for each script.
    foreach ($async_js as $script) {
<<<<<<< Updated upstream
      
      // Initialize variables.
      $query_string = empty($script['version']) ? $default_query_string : $js_version_string . $script['version'];
      $query_string_separator = (strpos($script['data'], '?') !== FALSE) ? '&' : '?';
      $url = file_create_url($script['data']) . $query_string_separator . ($script['cache'] ? $query_string : REQUEST_TIME);
      $callback = !empty($script['callback']) ? $script['callback'] : NULL;
      $fade = !empty($script['fade']) ? $script['fade'] : array();
      
=======

      // Build URL.
      if ($script['type'] != 'external') {
        $query_string = empty($script['version']) ? $default_query_string : $js_version_string . $script['version'];
        $query_string_separator = (strpos($script['data'], '?') !== FALSE) ? '&' : '?';
        $url = file_create_url($script['data']) . $query_string_separator . ($script['cache'] ? $query_string : REQUEST_TIME);
      }
      else {
        $url = file_create_url($script['data']);
      }

>>>>>>> Stashed changes
      // Add file to script list.
      $settings['javascript'][] = array(
        'data' => $url,
        'callback' => $script['callback'],
        'fade' => $script['fade'],
        'parent' => $script['parent'],
      );
      
    }
    
    // Add additional settings.
    $settings['timeout'] = variable_get('async_js_timeout', 1000);
    $settings['finalCallback'] = variable_get('async_js_final_callback', '');
    
    // Add our own script.
    $data = drupal_get_path('module', 'async_js') . '/async_js.js';
    $javascript[$data] = drupal_js_defaults($data);
  }
}
